{"version":3,"file":"static/js/826.dcff527a.chunk.js","mappings":"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","sources":["redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectFilter = state => state.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from '@emotion/styled';\nimport { Field, Form, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  margin-bottom: 30px;\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  align-items: center;\n  padding: 20px;\n  border: 2px black solid;\n  border-radius: 5px;\n  min-width: 350px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  row-gap: 2px;\n  color: white;\n  max-width: 300px;\n`;\n\nexport const Input = styled(Field)`\n  min-width: 300px;\n  min-height: 26px;\n  padding: 1px 5px;\n  font-size: 16px;\n  outline: none;\n  border-radius: 5px;\n  border-width: 0;\n`;\n\nexport const Button = styled.button`\n  padding: 5px 10px;\n  font-family: inherit;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  column-gap: 5px;\n\n  min-width: 140px;\n  min-height: 30px;\n  margin: 0;\n\n  background-color: white;\n  border: 2px black solid;\n  border-radius: 5px;\n  cursor: pointer;\n\n  font-size: 16px;\n  font-family: inherit;\n\n  transition: color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    background-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    border-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n\n  &:hover {\n    color: white;\n    background-color: black;\n    border-color: white;\n  }\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  font-size: 14px;\n  color: black;\n  max-width: 300px;\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  Button,\n  Input,\n  Label,\n  StyledForm,\n  StyledError,\n} from './ContactForm.styled';\nimport { Loader } from 'components/Loader';\n\nconst defaultValues = {\n  name: '',\n  number: '',\n};\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required('Name is required'),\n  number: Yup.string()\n    .required('Phone number is required')\n    .matches(\n      /^[\\d()+-]+$/,\n      'Phone number must contain only 0-9 and these symbols: ( ) - +'\n    )\n    .min(8, 'Phone number must be at least 8 characters'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const [determineAddBtn, setDetermineAddBtn] = useState(false);\n\n  const handleSubmitForm = (values, action) => {\n    setDetermineAddBtn(true);\n    const isInContacts = contacts.some(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (isInContacts) {\n      return toast.warn(`${values.name} is already in contacts.`);\n    }\n\n    dispatch(addContact(values)).then(() => {\n      setDetermineAddBtn(false);\n    });\n    action.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={defaultValues}\n      onSubmit={handleSubmitForm}\n      validationSchema={schema}\n    >\n      <StyledForm>\n        <Label>\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <StyledError name=\"name\" component=\"div\" />\n        </Label>\n        <Label>\n          Number\n          <Input type=\"tel\" name=\"number\" />\n          <StyledError name=\"number\" component=\"div\" />\n        </Label>\n        <Button type=\"submit\" disabled={isLoading && determineAddBtn}>\n          {isLoading && determineAddBtn && <Loader />}\n          Add Contact\n        </Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  row-gap: 10px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  column-gap: 10px;\n  color: white;\n`;\n\nexport const Button = styled.button`\n  padding: 5px 10px;\n  min-width: 100px;\n  font-family: inherit;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  column-gap: 5px;\n\n  margin: 0;\n  margin-left: auto;\n\n  background-color: white;\n  border: 2px black solid;\n  border-radius: 5px;\n  cursor: pointer;\n\n  font-size: 16px;\n  font-family: inherit;\n\n  transition: color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    background-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1),\n    border-color 250ms cubic-bezier(0.65, 0.05, 0.36, 1);\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: black;\n    border-color: white;\n  }\n`;\n\nexport const NoContacts = styled.p`\n  color: white;\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { List, ListItem, Button, NoContacts } from './ContactList.styled';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Loader } from 'components/Loader';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [contactToDeleteId, setContactToDeleteId] = useState(null);\n\n  if (!visibleContacts?.length && !error & !isLoading) {\n    return <NoContacts>No contacts added yet.</NoContacts>;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <List>\n      {visibleContacts.map(({ id, name, number }, idx) => (\n        <ListItem key={id}>\n          <div>{idx + 1}.</div>\n          {name}: {number}\n          <Button\n            onClick={() => {\n              setContactToDeleteId(id);\n              dispatch(deleteContact(id)).then(() => {\n                setContactToDeleteId(null);\n              });\n            }}\n            disabled={isLoading && contactToDeleteId === id}\n          >\n            {contactToDeleteId === id && <Loader />}\n            Delete\n          </Button>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  min-width: 250px;\n  min-height: 26px;\n  margin-bottom: 10px;\n  padding: 1px 5px;\n  font-size: 16px;\n  outline: none;\n  border-radius: 5px;\n  border-width: 0;\n`;\n","import { Input } from './Filter.styled';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <Input\n      type=\"text\"\n      value={filter}\n      onChange={e => dispatch(setFilter(e.target.value.trim()))}\n    />\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 600px;\n  margin: 0 auto;\n`;\n\nexport const ContactsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  align-items: center;\n  padding: 20px;\n  border: 2px black solid;\n  border-radius: 5px;\n  min-width: 350px;\n`;\n\nexport const MainTitle = styled.h1`\n  margin-bottom: 20px;\n\n  font-size: 32px;\n  text-align: center;\n  color: white;\n`;\n\nexport const ContactsTitle = styled.p`\n  margin-bottom: 10px;\n\n  font-size: 24px;\n  font-weight: 700;\n  text-align: center;\n  color: white;\n`;\n\nexport const FilterTitle = styled.p`\n  margin-bottom: 3px;\n\n  font-size: 18px;\n  text-align: center;\n  color: white;\n`;\n","import { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Filter } from 'components/Filter';\nimport {\n  ContactsContainer,\n  ContactsTitle,\n  FilterTitle,\n  MainTitle,\n  MainContainer,\n} from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your Contacts</title>\n      </Helmet>\n\n      <MainContainer>\n        <MainTitle>Phonebook</MainTitle>\n        <ContactForm />\n        <ContactsTitle>Contacts</ContactsTitle>\n        <ContactsContainer>\n          <FilterTitle>Find contacts by name</FilterTitle>\n          <Filter />\n          <ContactList />\n        </ContactsContainer>\n      </MainContainer>\n    </>\n  );\n}\n"],"names":["selectFilter","state","filter","selectIsLoading","contacts","isLoading","selectError","error","selectVisibleContacts","createSelector","items","contact","name","toLowerCase","includes","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","Field","_templateObject3","Button","_templateObject4","StyledError","ErrorMessage","_templateObject5","defaultValues","number","schema","Yup","shape","required","matches","min","ContactForm","dispatch","useDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","determineAddBtn","setDetermineAddBtn","_jsx","Formik","initialValues","onSubmit","values","action","some","_ref","toast","concat","addContact","then","resetForm","validationSchema","children","_jsxs","type","component","disabled","Loader","List","ListItem","NoContacts","ContactList","visibleContacts","contactToDeleteId","setContactToDeleteId","length","map","idx","id","onClick","deleteContact","Filter","value","onChange","e","setFilter","target","trim","MainContainer","ContactsContainer","MainTitle","ContactsTitle","FilterTitle","Contacts","useEffect","fetchContacts","_Fragment","Helmet"],"sourceRoot":""}